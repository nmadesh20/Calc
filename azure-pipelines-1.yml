# Maven
# Build your Java project and run tests with Apache Maven.
# Add steps that analyze code, save build artifacts, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/java

trigger:
- master

pool:
  vmImage: ubuntu-latest

steps:

- task: SonarCloudPrepare@1
  inputs:
    SonarCloud: 'sonar-connection'
    organization: 'app-sonar2706'
    scannerMode: 'Other'
- task: ArtifactoryMaven@2
  inputs:
    mavenPomFile: 'pom.xml'
    goals: 'install'
    artifactoryResolverService: 'JfrogConnection'
    targetResolveReleaseRepo: 'default-maven-virtual'
    targetResolveSnapshotRepo: 'default-maven-virtual'
    artifactoryDeployService: 'JfrogConnection'
    targetDeployReleaseRepo: 'default-maven-virtual'
    targetDeploySnapshotRepo: 'default-maven-virtual'

- task: Maven@3
  displayName: Packaging with Maven
  inputs:
    mavenPomFile: 'pom.xml'
    publishJUnitResults: true
    testResultsFiles: '**/surefire-reports/TEST-*.xml'
    javaHomeOption: 'JDKVersion'
    mavenVersionOption: 'Default'
    mavenAuthenticateFeed: false
    effectivePomSkip: false
    sonarQubeRunAnalysis: false
    goals: 'package'

- task: PublishPipelineArtifact@1
  inputs:
    targetPath: '$(Pipeline.Workspace)'
    artifact: 'fortify'
    publishLocation: 'pipeline'

- task: CopyFiles@2
  inputs:
    SourceFolder: '$(Pipeline.Workspace)'
    Contents: '**'
    TargetFolder: '$(Build.StagingDirectory)'

    
- task: ArchiveFiles@2
  inputs:
    rootFolderOrFile: '$(Build.StagingDirectory)'
    includeRootFolder: true
    archiveType: 'zip'
    archiveFile: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId).zip'
    replaceExistingArchive: true

- task: Bash@3
  displayName: Files in StagingDirectory
  inputs:
    targetType: 'inline'
    script: |
      # Write your commands here
      
      cd $(Build.StagingDirectory)
      ls -lrt
- task: Bash@3
  displayName: Files in ArtifactStagingDirectory
  inputs:
    targetType: 'inline'
    script: |
      # Write your commands here
      
      cd $(Build.ArtifactStagingDirectory)
      ls -lrt
- task: ArtifactoryGenericUpload@2
  inputs:
    artifactoryService: 'JfrogConnection'
    specSource: 'taskConfiguration'
    fileSpec: |
      {
        "files": [
          {
            "pattern": "$(Build.ArtifactStagingDirectory)/*.zip",
            "target": "generic-local"
          }
        ]
      }
    buildName: '$(Build.DefinitionName)'
    buildNumber: '$(Build.BuildNumber)'
    includeEnvVars: true
    failNoOp: true




- task: JFrogCollectIssues@1
  inputs:
    artifactoryConnection: 'Jfrog Artiv2'
    configSource: 'taskConfiguration'
    taskConfig: |
      version: 1
      issues:
          trackerName: GITHUB
          regexp: (.+-[0-9]+)\s-\s(.+) 
          keyGroupIndex: 1
          summaryGroupIndex: 2
          trackerUrl: https://github.com/issues?q=is%3Aopen+is%3Aissue+assignee%3Anmadesh20+archived%3Afalse+user%3Anmadesh20
          aggregate: true
          aggregationStatus: RELEASED
    buildName: '$(Build.DefinitionName)'
    buildNumber: '$(Build.BuildNumber)'

- task: ArtifactoryGenericDownload@3
  inputs:
    connection: 'JfrogConnection'
    specSource: 'taskConfiguration'
    fileSpec: |
      {
        "files": [
          {
            "pattern": "generic-local/*.zip",
            "target": "dependencies/files"
          }
        ]
      }
    collectBuildInfo: true
    buildName: '$(Build.DefinitionName)'
    buildNumber: '$(Build.BuildNumber)'
    failNoOp: true
- task: JFrogPublishBuildInfo@1
  inputs:
   artifactoryConnection: 'Jfrog Artiv2'
   buildName: '$(Build.DefinitionName)'
   buildNumber: '$(Build.BuildNumber)'
   

- task: ArtifactoryXrayScan@1
  inputs:
    artifactoryService: 'JfrogConnection'
    buildName: '$(Build.DefinitionName)'
    buildNumber: '$(Build.BuildNumber)'
    allowFailBuild: true

- task: ArtifactoryBuildPromotion@1
  inputs:
    artifactoryService: 'JfrogConnection'
    buildName: '$(Build.DefinitionName)'
    buildNumber: '$(Build.BuildNumber)'
    targetRepo: 'generic-local'
    status: 'Released'
    includeDependencies: true
    copy: true
    dryRun: false
    sourceRepo: 'generic-local'




